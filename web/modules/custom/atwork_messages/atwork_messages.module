<?php

use Drupal\node\NodeInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\message\Entity\Message;
use Drupal\Component\Utility\Html;
use Drupal\Core\Mail\MailManagerInterface;

/**
 * @file
 * Primary module hooks for atwork_messages module.
 */

/**
 * Implements hook_ENTITY_TYPE_insert() for node entities.
 */
function atwork_messages_node_insert(NodeInterface $node) {
	// Check for entity type, published value and create message 
	if(($node->get('type')->getString() == 'article') && ($node->get('status')->getString() == 1)){
	  // Create Message for Article node
		atwork_messages_create_message($node);
	}
}

/**
 * Implements hook_ENTITY_TYPE_insert() for comments.
 */
function atwork_messages_comment_insert(Comment $comment) {
	// Get comment & node and pass it to the create message?
}

/**
 * Implements hook_ENTITY_TYPE_update() for node entities.
 */
function atwork_messages_node_update(NodeInterface $node) {
	// Check for entity type, published value and create message
	if(($node->get('type')->getString() == 'article') && ($node->get('status')->getString() == 1)){
		// Create Message for Article node
		atwork_messages_create_message($node);
	}
}

/**
 * Implements hook_ENTITY_TYPE_update() for comments.
 */
function atwork_messages_comment_update(Comment $comment) {
	// Get comment & node and pass it to the create message?
}

/**
 * Implements message creation for subscriptions.
 */
function atwork_messages_create_message(NodeInterface $node) {
	
	// Build subscription message
	$message = Message::create(['template' => 'subscription_digest', 'uid' => $node->getOwnerId()]);
	$message->set('field_node_ref', $node);
	
	// Must save message to get mid (message ID)
	$message->save();

	// Send out immediate notifications
	$presave_query = "Select f.uid, f.entity_id as subscribed_content, fmd.entity_id from flagging f, flagging__message_digest fmd where f.id = fmd.entity_id and fmd.message_digest_value = '";
	$immediate_subs = atwork_messages_get_subscribers(0, $presave_query);
	foreach($immediate_subs as $sub) {
		//atwork_messages_send_notification($sub,'node_insert','Test');
	}
	
	$renderable = [
			'#theme' => 'atwork_messages_digest'
	];
	kint(\Drupal::service('renderer')->render($renderable));
	die();
	
	// Save messages to database on article creation or update. 
	$daily_subs = array('notifier' => 'daily', 'subscribers' => atwork_messages_get_subscribers('message_digest:daily', $presave_query));
	$weekly_subs = array('notifier' => 'weekly', 'subscribers' => atwork_messages_get_subscribers('message_digest:weekly', $presave_query));
	$subs_list = array($daily_subs, $weekly_subs);
	
	foreach($subs_list as $list) {
		foreach($list['subscribers'] as $sub) {
			if($sub->subscribed_content == $node->id()) {
				// Insert message data into message_digest table
				// TODO: Figure out how to do an insert ignore, as this does not exist in Drupal 8
				try{
					$connection = \Drupal::database();
					$query = $connection->merge('atwork_messages')
					->fields([
							'mid' => $message->get('mid')->getValue()[0]['value'],
							'entity_type' => 'node',
							'entity_id' => $node->id(),
							'receiver' => $sub->uid,
							'notifier' => $list['notifier'],
							'timestamp' => time(),
					])
					->condition('entity_id', $node->id(), '=')
					->condition('receiver', $sub->uid, '=')
					->execute();
				} catch(Exception $e) {
					\Drupal::logger('type')->error($e->getMessage());
				}
			}
		}
	}
}

/**
 * Return subscribers list by notification frequency
 * 
 * @param string $notifier
 * 	 Notification frequency of desired list of subscribers
 */
function atwork_messages_get_subscribers($notifier, $query) {
	$result = '';
	try{
		$connection = \Drupal::database();
		$query = $connection->query($query . $notifier . "'");
		$result = $query->fetchAll();
	} catch(Exception $e) {
		\Drupal::logger('type')->error($e->getMessage());
	}
	return $result;
}

/**
 * Sends notification messages to desired users
 * 
 * @param array $subscribers
 * 	Array of users being sent the notification message
 * @param string $msg_key
 * 	An identifier of the mail.
 * @param array $message
 * 	Array: the message object to send to the user. Elements in this array include: id, to, subject, body, from, headers.
 */
function atwork_messages_send_notification($subscriber, $msg_key = 'node_insert', $message = 'Generic Test Message') {
	// Build notification message for each sub/node and send.
	$user = user_load($subscriber->uid);
	$recipient = $user->get('name')->getValue()[0]['value'];
	$mailManager = \Drupal::service('plugin.manager.mail');
	$module = 'atwork_messages';
	$key= $msg_key; // This could also be immediate to distinguish between templates for different frequencies
	$langcode = \Drupal::currentUser()->getPreferredLangcode();
	if($user->__isset('mail')) {
	  $to = $user->get('mail')->getValue()[0]['value'];
	}
	$params['message'] = $message;
	$params['username'] = $user->get('name');
	$send = true;
	$result = $mailManager->mail($module, $key, $to, $langcode, $params, NULL, $send);
	if ($result['result'] != true) {
		\Drupal::logger('mail-log')->error('Unable to send immediate notifications to ' . $recipient . ' at ' . $to);
		return;
	} else {
		\Drupal::logger('mail-log')->notice('Notification sent to ' . $recipient . ' at ' . $to);
	}
}

/**
 * Implements hook_mail()
 * 
 *  @param string	$key
 *  	An identifier of the mail.
 *  @param string $message
 *  	Array: the message object to send to the user. Elements in this array include: id, to, subject, body, from, headers.
 *  @param string $params
 *  	Array: variables to replace tokens in message subject/body; supplied by caller of MailManagerInterface->mail().
 */
function atwork_messages_mail($key, &$message, $params) {
	$options = array(
			'langcode' => $message['langcode'],
	);
	switch ($key) {
		case 'node_insert':
			$message['from'] = \Drupal::config('system.site')->get('mail');
			$message['subject'] = t('@Work Subscriptions');
			$message['body'][] = Html::escape($params['message']);
			break;
	}
}

/**
 * Implements hook_theme().
 */
function atwork_messages_theme() {
	return [
			'atwork_messages_digest.html.twig' => [
					'variables' => [],
			],
	];
}

/**
 * Implements theme_preprocess_template().
 */
function atworknext_preprocess_atwork_messages_digest(&$variables) {

}

/**
 * Implements cron callback for weekly subscribers
 */
function atwork_messages_daily_cron($job) {
//function atwork_messages_daily() {
	$daily_query = "Select receiver as uid from atwork_messages where sent = 0 and notifier = '";
	$daily_subs = atwork_messages_get_subscribers('daily', $daily_query);
	if($daily_subs) {
	  foreach($daily_subs as $sub) {
	    atwork_messages_send_notification($sub);
	  }
	}
}

/**
 * Implements cron callback for daily subscribers
 */
function atwork_messages_weekly_cron($job) {
	$weekly_query = "Select receiver as uid from atwork_messages where sent = 0 and notifier = '";
	$weekly_subs= atwork_messages_get_subscribers('weekly', $weekly_query);
	if($weekly_subs) {
		foreach($weekly_subs as $sub) {
			atwork_messages_send_notification($sub);
		}
	}
}
