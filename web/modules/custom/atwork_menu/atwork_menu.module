<?php

/**
 * @file
 * Contains atwork_menu.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\group\Entity\Group;
use Drupal\Core\Entity\EntityManager;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\Core\Link;

/**
 * Implements hook_help().
 */
function atwork_menu_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the atwork_menu module.
    case 'help.page.atwork_menu':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Customizations for the main menu navigation.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_preprocess_hook().
 */
function atworknext_preprocess_menu__main(&$variables) {
	foreach ($variables['items'] as $item) {
		atwork_menu_add_links_to_menu_items($item);
	}
}

/**
 * Adds link object to menu items that should have links
 */
function atwork_menu_add_links_to_menu_items(&$item) {
	// Add link to menu item
	// Menu link properties.
	$link = $item['original_link']->getPluginDefinition();
	$url_object = $item['original_link']->getUrlObject();

	// Check for child links and recurse, if any
	if($item['below']) {
		foreach ($item['below'] as $child) {
			atwork_menu_add_links_to_menu_items($child);
		}
	}else {
		$item['link'] = $url_object;
	}
}

/**
 * Implements hook_ENTITY_TYPE_insert() for group entities.
 *
 * Create sidebar nav menu on creation of new atwork group.
 */
function atwork_menu_group_insert(Group $group) {
	// Create group sidebar menu.
	\Drupal::entityTypeManager()->getStorage('menu')
	->create([
			'langcode' => 'en',
			'status' => TRUE,
			'dependencies' => array(),
			'id' => str_replace(' ', '-', strtolower($group->label())),
			'label' => $group->label(),
			'description' => '',
			'locked' => TRUE,
	])->save();

	// Create some default links for group menus
	MenuLinkContent::create([
			'title' => 'Home',
			'link' => ['uri' => 'internal:' . $group->url()],
			'menu_name' => str_replace(' ', '-', strtolower($group->label())),
			'weight' => 0,
	])->save();

	MenuLinkContent::create([
			'title' => 'Group Posts',
			'link' => ['uri' => 'internal:' . $group->url() . '/posts'],
			'menu_name' => str_replace(' ', '-', strtolower($group->label())),
			'weight' => 1,
	])->save();

	MenuLinkContent::create([
			'title' => 'Group Photo Galleries',
			'link' => ['uri' => 'internal:' . $group->url() . '/photo-galleries'],
			'menu_name' => str_replace(' ', '-', strtolower($group->label())),
			'weight' => 2,
	])->save();
}

/**
 * Implements hook_ENTITY_TYPE_insert() for program area pages.
 *
 * Create sidebar nav menu on creation of new program area background page.
 */
function atwork_menu_node_insert(Drupal\node\Entity\Node $node) {
	// If this is a new program area page, create a menu
	if($node->get('type') && $node->get('type')->getValue()[0]['target_id'] == 'background_page'){
		\Drupal::entityTypeManager()->getStorage('menu')
		->create([
				'langcode' => 'en',
				'status' => TRUE,
				'dependencies' => array(),
				'id' => str_replace(' ', '-', strtolower($node->get('title')->getValue()[0]['value'])),
				'label' => $node->get('title')->getValue()[0]['value'],
				'description' => '',
				'locked' => TRUE,
		])->save();

	  // Create some default links for program area menus
		MenuLinkContent::create([
				'title' => $node->get('title')->getValue()[0]['value'] . ' Home',
				'link' => ['uri' => 'internal:/node/' . $node->get('nid')->getValue()[0]['value']],
				'menu_name' => str_replace(' ', '-', strtolower($node->get('title')->getValue()[0]['value'])),
				'weight' => 0,
		])->save();
	}

	// Add menu links for new program area content to program area page sidebar menus
	if($node->get('type') && $node->get('type')->getValue()[0]['target_id'] == 'program_area_content'){
		// Add link to this content to program area sidebar menu
		try {
			$connection = \Drupal::database();
			$query = $connection->query("SELECT field_parent_program_target_id FROM {node__field_parent_program} WHERE entity_id like '" . $node->id(). "'");
			$result = $query->fetch();
		}
		catch(Exception $e) {
			\Drupal::logger('type')->error($e->getMessage());
		}
		
		$program_area_id = $result->field_parent_program_target_id;
		$program = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties(['nid' => $program_area_id]);
		
		// Add link to this content to program area sidebar menu
		// Create some default links for program area menus
		MenuLinkContent::create([
				'title' => $node->get('title')->getValue()[0]['value'],
				'link' => ['uri' => 'internal:/node/' . $node->get('nid')->getValue()[0]['value']],
				'menu_name' => str_replace(' ', '-', strtolower($program[$program_area_id]->getTitle())),
				'weight' => 0,
		])->save();
	}
}

/**
 * Implements hook_preprocess_HOOK() for group sidebar nav menu.
 */
function atworknext_preprocess_block__group_sidebar_menu(&$variables) {
	$group_name = \Drupal::routeMatch()->getParameters()->get('group')->get('label')->getValue()[0]['value'];
	$variables['group_name'] = str_replace(' ', '-', strtolower($group_name));
}

/**
* Implements hook_preprocess_HOOK() for program area sidebar nav menu.
*/
function atworknext_preprocess_block__program_area_sidebar_menu(&$variables) {
	// These or whatever other roles can alter the sidebar nav menu for program areas
	$auth_roles = ['administrator', 'program_area_admin'];
	$variables['admin'] = FALSE;
	if(count(array_intersect($auth_roles, \Drupal::currentUser()->getAccount()->getRoles())) > 0) {
	  $variables['admin'] = TRUE;
	}

	$nid = \Drupal::routeMatch()->getParameters()->all()['node']->get('nid')->getValue()[0]['value'];
	// Find program area homepage/content and add links to menu
	try {
		$connection = \Drupal::database();
		$query = $connection->query("SELECT field_parent_program_target_id FROM {node__field_parent_program} WHERE entity_id like '" . $nid . "'");
		$result = $query->fetch();
	}
	catch(Exception $e) {
		\Drupal::logger('type')->error($e->getMessage());
	}
	
	$program_area_id = $result->field_parent_program_target_id;
	$program = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties(['nid' => $program_area_id]);
	$variables['program_name'] = str_replace(' ', '-', strtolower($program[$program_area_id]->getTitle()));
	
	//// No other good place for this, really
	$linkObject = Link ::createFromRoute(t('Administer Program Menu'), 'entity.menu.edit_form', ["menu" => str_replace(' ', '-', strtolower($program[$program_area_id]->getTitle()))]);
	$variables['administer_sidebar'] = $linkObject->toRenderable();
}

/**
 * Implements hook_form_alter().
 *
 * Set menu edit page redirects for group and program area sidebars
 */
function atwork_menu_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
	if($form_id === 'menu_edit_form') {
		$form['actions']['submit']['#submit'][] = 'atwork_menu_sidebar_menu_edit_form_submit';
	}
}

/**
 * Implements custom submit handler
 *
 * Add a redirect to group sidebar menu and program area sidebar menu config pages.
 */
function atwork_menu_sidebar_menu_edit_form_submit(array $form, \Drupal\Core\Form\FormStateInterface$form_state){
  $route_params = \Drupal::routeMatch()->getParameters();
  // Is it a group sidebar  menu? If yes, set redirect.
  $groups = \Drupal::entityTypeManager()->getStorage('group')->loadMultiple();
  $group = \Drupal::entityTypeManager()->getStorage('group')->loadByProperties(['label' => $route_params->all()['menu']->label()]);
  $group = reset($group);
  // Set menu redirect to redirect group sidebar menu config page back to group page.
  if($group !== FALSE) {
  	$form_state->setRedirect('entity.group.canonical', ['group' => $group->id()]);
  	return;
  }
  // Is it a program area sidebar menu? If yes, set redirect.
	$program_area = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties(['title' => $route_params->all()['menu']->label()]);
	$program_area = reset($program_area);
	if($program_area !== FALSE) {
		$form_state->setRedirect('entity.node.canonical', ['node' => $program_area->id()]);
		return;
	}
}
