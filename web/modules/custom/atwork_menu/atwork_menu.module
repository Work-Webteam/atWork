<?php

/**
 * @file
 * Contains atwork_menu.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\group\Entity\Group;
use Drupal\Core\Entity\EntityManager;
use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\Core\Link;

/**
 * Implements hook_help().
 */
function atwork_menu_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the atwork_menu module.
    case 'help.page.atwork_menu':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Customizations for the main menu navigation.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_preprocess_hook().
 */
function atworknext_preprocess_menu__main(&$variables) {
	foreach ($variables['items'] as $item) {
		atwork_menu_add_links_to_menu_items($item);
	}
}

/**
 * Adds link object to menu items that should have links
 */
function atwork_menu_add_links_to_menu_items(&$item) {
	// Add link to menu item
	// Menu link properties.
	$link = $item['original_link']->getPluginDefinition();
	$url_object = $item['original_link']->getUrlObject();
	
	// Check for child links and recurse, if any
	if($item['below']) {
		foreach ($item['below'] as $child) {
			atwork_menu_add_links_to_menu_items($child); 
		}
	}else {
		$item['link'] = $url_object;
	}
}

/**
 * Implements hook_ENTITY_TYPE_insert() for group entities.
 */
function atwork_menu_group_insert(Group $group) {
	// Create group sidebar menu.
	\Drupal::entityTypeManager()->getStorage('menu')
	->create([
			'langcode' => 'en',
			'status' => TRUE,
			'dependencies' => array(),
			'id' => str_replace(' ', '_', strtolower($group->label())),
			'label' => $group->label() . ' Menu',
			'description' => '',
			'locked' => TRUE,
	])->save();
	
	// Create some default links for group menus
	MenuLinkContent::create([
			'title' => $group->label() . 'Home',
			'link' => ['uri' => 'internal:' . $group->url()],
			'menu_name' => $group->label() . ' Menu',
	])->save();
	
	MenuLinkContent::create([
			'title' => 'Group Posts',
			'link' => ['uri' => 'internal:' . $group->url() . '/posts'],
			'menu_name' => $group->label() . ' Menu',
	])->save();
	
	MenuLinkContent::create([
			'title' => 'Group Photo Galleries',
			'link' => ['uri' => 'internal:' . $group->url() . '/photo-galleries'],
			'menu_name' => $group->label() . ' Menu',
	])->save();
}

function atwork_menu_entity_insert(Drupal\Core\Entity\EntityInterface $entity) {
	// If this is a new program area page, create a menu
	if($entity->get('type')->getValue()[0]['target_id'] && $entity->get('type')->getValue()[0]['target_id'] == 'background_page'){
		\Drupal::entityTypeManager()->getStorage('menu')
		->create([
				'langcode' => 'en',
				'status' => TRUE,
				'dependencies' => array(),
				'id' => str_replace(' ', '_', strtolower($entity->get('title')->getValue()[0]['value'])),
				'label' => $entity->get('title')->getValue()[0]['value'] . ' Menu',
				'description' => '',
				'locked' => TRUE,
		])->save();
		
		// Create some default links for program menus
		MenuLinkContent::create([
				'title' => $entity->get('title')->getValue()[0]['value'] . 'Home',
				'link' => ['uri' => 'internal:/node/' . $entity->get('nid')->getValue()[0]['value']],
				'menu_name' => $entity->get('title')->getValue()[0]['value'] . ' Menu',
		])->save();
	}
}

/**
 * Implements hook_preprocess_HOOK() for group sidebar nav menu.
 */
function atworknext_preprocess_block__group_sidebar_menu(&$variables) {
	$node_types = \Drupal\node\Entity\NodeType::loadMultiple();
	ksm($node_types);
	$group_name = \Drupal::routeMatch()->getParameters()->get('group')->get('label')->getValue()[0]['value'];
	$variables['group_name'] = $group_name;
}
	
/**
 * Implements hook_form_alter().
 *
 */
function atwork_menu_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
	if($form_id === 'menu_edit_form') {
	  $group_params = \Drupal::routeMatch()->getParameters();
	  $group = \Drupal::entityTypeManager()->getStorage('group')->loadByProperties(['label' => $group_params->all()['menu']->id()]);
	  $group = reset($group);
	  // Set menu redirect to redirect group sidebar menu config page back to group page.
	  if($group !== false) {
	  	$form_state->setRedirect('entity.group.canonical', ['group' => $group->id()]);
	  }
	}
}