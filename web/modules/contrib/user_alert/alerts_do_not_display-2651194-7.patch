diff --git a/config/install/core.entity_view_mode.user_alert.teaser.yml b/config/install/core.entity_view_mode.user_alert.teaser.yml
new file mode 100644
index 0000000..a6299b1
--- /dev/null
+++ b/config/install/core.entity_view_mode.user_alert.teaser.yml
@@ -0,0 +1,11 @@
+langcode: en
+status: true
+dependencies:
+  module:
+    - user_alert
+_core:
+  default_config_hash: qOhTHkJajSZ4AGJqb9jy_liBM83tZpBFCtsEOI75cD0
+id: user_alert.teaser
+label: Teaser
+targetEntityType: user_alert
+cache: true
diff --git a/js/user-alert.js b/js/user-alert.js
index 883b8e8..0562247 100644
--- a/js/user-alert.js
+++ b/js/user-alert.js
@@ -1,11 +1,11 @@
-(function ($) {
+(function ($, Drupal) {
   Drupal.behaviors.user_alert_get_message = {
-    attach: function(context) {
+    attach: function(context, settings) {
       $.ajax({
         type: 'GET',
-        url: Drupal.settings.basePath + Drupal.settings.pathPrefix + Drupal.settings.user_alert.url_prefix + 'js/user-alert/get-message',
+        url: '/js/user-alert/get-message',
         success: function(response) {
-          $('.block-user-alert').html(response[1].data);
+          $('.block-user-alert').html(response['alerts']);
         }
       });
     	
@@ -14,7 +14,7 @@
         $.ajax({
           type: 'GET',
           data: 'message=' + id,
-          url: Drupal.settings.basePath + Drupal.settings.user_alert.url_prefix + 'js/user-alert/close-message',
+          url: '/js/user-alert/close-message',
           success: function(response) {
             $('#user-alert-' + id).fadeOut('slow');
           }
@@ -22,4 +22,4 @@
       });
   	}
   };
-}(jQuery));
+}(jQuery, Drupal));
\ No newline at end of file
diff --git a/src/Controller/UserAlertController.php b/src/Controller/UserAlertController.php
index 2f643ce..a081501 100644
--- a/src/Controller/UserAlertController.php
+++ b/src/Controller/UserAlertController.php
@@ -7,16 +7,21 @@
 
 namespace Drupal\user_alert\Controller;
 
+use PDO;
+use Drupal\Core\Url;
 use Drupal\Component\Utility\Xss;
+use Drupal\Component\Utility\Unicode;
+use Drupal\user_alert\Entity\UserAlert;
+use Drupal\Core\Render\RendererInterface;
+use Drupal\user_alert\UserAlertInterface;
 use Drupal\Core\Controller\ControllerBase;
-use Drupal\Core\Datetime\DateFormatterInterface;
-use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 use Drupal\Core\Language\LanguageInterface;
-use Drupal\Core\Render\RendererInterface;
-use Drupal\Core\Url;
+use Symfony\Component\HttpFoundation\Cookie;
 use Drupal\user_alert\UserAlertTypeInterface;
-use Drupal\user_alert\UserAlertInterface;
+use Drupal\Core\Datetime\DateFormatterInterface;
+use Symfony\Component\HttpFoundation\JsonResponse;
 use Symfony\Component\DependencyInjection\ContainerInterface;
+use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
 
 /**
  * Returns responses for Node routes.
@@ -131,4 +136,68 @@ class UserAlertController extends ControllerBase implements ContainerInjectionIn
     return $this->t('Create @name', array('@name' => $user_alert_type->label()));
   }
 
+  /**
+   * Gather alerts for the current user and return them. Exclude ones already closed.
+   *
+   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   *   A JSON response containing alerts in html.
+   */
+  public function displayAlert() {
+
+    $module_handler = \Drupal::service('module_handler'); 
+    if ($module_handler->moduleExists('translation')) {
+      $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
+    } else {
+      $language = LanguageInterface::LANGCODE_NOT_SPECIFIED;
+    }
+
+    $output = '';
+    $query = db_query("SELECT ua.id FROM {user_alert} ua WHERE ua.uuid NOT IN (SELECT uat.uuid_alert FROM {user_alert_track} uat WHERE uat.uuid_user = :cookie) ORDER BY ua.id DESC", array(':cookie' => $_COOKIE['Drupal_visitor_UUID']));
+    $records = $query->fetchAllAssoc('id', PDO::FETCH_ASSOC);
+
+    if (isset($records)) {
+      foreach ($records as $record) {
+        $entity = UserAlert::load($record['id']);
+        if (isset($_COOKIE['Drupal_visitor_UUID'])) {
+          $alert = entity_view($entity, 'teaser');
+
+          $user_alert = [
+            '#theme' => 'user_alert_message',
+            '#is_closeable' => TRUE,
+            '#id' => $record['id'],
+            '#alert' => render($alert),
+          ];
+
+          $output .= render($user_alert);
+        }
+      }
+    }
+
+    return new JsonResponse(
+      array(
+        'alerts' => $output
+      )
+    );
+  }
+
+  /**
+   * Respond to a user clicking to close an alert.
+   */
+  public function closeAlert() {
+    $id = $_GET['message'];
+
+    $alert = UserAlert::load($id);
+    if (!$alert) {
+      return;
+    }
+
+    $fields = array(
+      'uuid_alert' => $alert->uuid(),
+      'uuid_user' => $_COOKIE['Drupal_visitor_UUID'],
+    );
+
+    db_insert('user_alert_track')->fields($fields)->execute();
+
+    return new JsonResponse();
+  }
 }
diff --git a/src/Plugin/Block/UserAlertBlock.php b/src/Plugin/Block/UserAlertBlock.php
index 63fb213..ce7ba9c 100644
--- a/src/Plugin/Block/UserAlertBlock.php
+++ b/src/Plugin/Block/UserAlertBlock.php
@@ -7,11 +7,11 @@
 
 namespace Drupal\user_alert\Plugin\Block;
 
-use Drupal\Component\Transliteration\TransliterationInterface;
 use Drupal\Core\Block\BlockBase;
-use Drupal\Core\Block\BlockPluginInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\Block\BlockPluginInterface;
+use Drupal\Component\Transliteration\TransliterationInterface;
 
 /**
  * Provides a 'User Alert' block.
@@ -206,6 +206,24 @@ class UserAlertBlock extends BlockBase implements BlockPluginInterface {
    * @see \Drupal\block\BlockViewBuilder
    */
   public function build() {
-    // TODO: Implement build() method.
+    $uuidService = \Drupal::service('uuid');
+    if (!isset($_COOKIE['Drupal_visitor_UUID'])) {
+      $uuid = $uuidService->generate();
+      user_cookie_save(array('UUID' => $uuid));
+    }
+
+    return array(
+      '#attributes' => array(
+        'class' => array(
+          'block-user-alert',
+        ),
+      ),
+      '#attached' => array(
+        'library' => array(
+          'user_alert/user-alert',
+        ),
+      ),
+      '#markup' => '',
+    );
   }
 }
diff --git a/templates/user-alert-message.html.twig b/templates/user-alert-message.html.twig
new file mode 100644
index 0000000..cabdf47
--- /dev/null
+++ b/templates/user-alert-message.html.twig
@@ -0,0 +1,26 @@
+{#
+/**
+ * @file user_alert.html.twig
+ * Default theme implementation to present User alert data.
+ *
+ * This template is used when viewing User alert pages.
+ *
+ *
+ * Available variables:
+ * - alert: A list of alert items. Use 'alert' to print all alerts, or
+ * - attributes: HTML attributes for the container element.
+ * - is_closeable: Boolean to determine if alert can be closed.
+ *
+ * @see template_preprocess_user_alert()
+ *
+ * @ingroup themeable
+ */
+#}
+<div id="user-alert-{{ id }}" {{ attributes.addClass('user-alert') }}>
+  {% if is_closeable %}
+    <div class="user-alert-close"><a href="javascript:;" rel="{{ id }}">x</a></div>
+  {% endif %}
+  {% if alert %}
+    {{- alert -}}
+  {% endif %}
+</div>
diff --git a/templates/user_alert.html.twig b/templates/user_alert.html.twig
deleted file mode 100644
index 0995df4..0000000
--- a/templates/user_alert.html.twig
+++ /dev/null
@@ -1,23 +0,0 @@
-{#
-/**
- * @file user_alert.html.twig
- * Default theme implementation to present User alert data.
- *
- * This template is used when viewing User alert pages.
- *
- *
- * Available variables:
- * - content: A list of content items. Use 'content' to print all content, or
- * - attributes: HTML attributes for the container element.
- *
- * @see template_preprocess_user_alert()
- *
- * @ingroup themeable
- */
-#}
-<div{{ attributes.addClass('user_alert') }}>
-  {% if is_closeable %}<div class="user-alert-close"><a href="javascript:;" rel="{{ id }}">x</a></div>{% endif %}
-  {% if content %}
-    {{- content -}}
-  {% endif %}
-</div>
diff --git a/user_alert.install b/user_alert.install
index 33801d0..7c0a270 100644
--- a/user_alert.install
+++ b/user_alert.install
@@ -1,4 +1,6 @@
 <?php
+
+use Drupal\user_alert\Entity\UserAlert;
 /**
  * @file
  * Install and uninstall functions for the User Alert module.
@@ -18,83 +20,32 @@ function user_alert_requirements($phase) {
  * Implements hook_schema().
  * @return array
  */
-//function user_alert_schema() {
-//  $schema['user_alert'] = array(
-//    'description' => 'The base table for nodes.',
-//    'fields' => array(
-//      'id' => array(
-//        'description' => 'The primary identifier for a user alert.',
-//        'type' => 'serial',
-//        'unsigned' => TRUE,
-//        'not null' => TRUE,
-//      ),
-//      'uuid' => array(
-//        'description' => 'Unique Key: Universally unique identifier for this entity.',
-//        'type' => 'varchar',
-//        'length' => 128,
-//        'not null' => FALSE,
-//      ),
-//      'langcode' => array(
-//        'description' => 'The {language}.langcode of this node.',
-//        'type' => 'varchar_ascii',
-//        'length' => 12,
-//        'not null' => TRUE,
-//        'default' => '',
-//      ),
-//      'status' => array(
-//        'description' => 'Boolean indicating whether the alert is published (visible to non-administrators).',
-//        'type' => 'int',
-//        'not null' => TRUE,
-//        'default' => 1,
-//      ),
-//      'uid' => array(
-//        'description' => 'The {users}.uid that owns this entity; initially, this is the user that created it.',
-//        'type' => 'int',
-//        'unsigned' => TRUE,
-//        'not null' => TRUE,
-//        'default' => 0,
-//      ),
-//    ),
-//    'indexes' => array(
-//      'uid' => array('uid'),
-//    ),
-//    'unique keys' => array(
-//      'uuid' => array('uuid'),
-//    ),
-//    'foreign keys' => array(
-//      'user_alert_track' => array(
-//        'table' => 'user_alert_track',
-//        'columns' => array('uuid_alert' => 'uuid'),
-//      ),
-//    ),
-//    'primary key' => array('id'),
-//  );
-//
-//  $schema['user_alert_track'] = array(
-//    'description' => 'User Alert table.',
-//    'fields' => array(
-//      'id' => array(
-//        'description' => 'The serial ID.',
-//        'type' => 'serial',
-//        'unsigned' => TRUE,
-//        'not null' => TRUE,
-//      ),
-//      'uuid_alert' => array(
-//        'description' => 'Unique Key: Universally unique identifier for this entity.',
-//        'type' => 'varchar',
-//        'length' => 128,
-//        'not null' => FALSE,
-//      ),
-//      'uuid_user' => array(
-//        'description' => 'The UUID of the user.',
-//        'type' => 'varchar',
-//        'length' => 255,
-//        'not null' => TRUE,
-//        'default' => '0',
-//      ),
-//    ),
-//    'primary key' => array('id'),
-//  );
-//
-//  return $schema;
-//}
\ No newline at end of file
+function user_alert_schema() {
+  $schema['user_alert_track'] = array(
+    'description' => 'User Alert table.',
+    'fields' => array(
+      'id' => array(
+        'description' => 'The serial ID.',
+        'type' => 'serial',
+        'unsigned' => TRUE,
+        'not null' => TRUE,
+      ),
+      'uuid_alert' => array(
+        'description' => 'Unique Key: Universally unique identifier for this entity.',
+        'type' => 'varchar',
+        'length' => 128,
+        'not null' => FALSE,
+      ),
+      'uuid_user' => array(
+        'description' => 'The UUID of the user.',
+        'type' => 'varchar',
+        'length' => 255,
+        'not null' => TRUE,
+        'default' => '0',
+      ),
+    ),
+    'primary key' => array('id'),
+  );
+
+  return $schema;
+}
diff --git a/user_alert.libraries.yml b/user_alert.libraries.yml
new file mode 100644
index 0000000..2ed5633
--- /dev/null
+++ b/user_alert.libraries.yml
@@ -0,0 +1,11 @@
+user-alert:
+  version: 1.x
+  css:
+    theme:
+      css/user-alert.css: {}
+  js:
+    js/user-alert.js: {}
+  dependencies:
+    - core/jquery
+    - core/jquery.once
+    
\ No newline at end of file
diff --git a/user_alert.links.menu.yml b/user_alert.links.menu.yml
index a2ce037..4424ebd 100644
--- a/user_alert.links.menu.yml
+++ b/user_alert.links.menu.yml
@@ -9,5 +9,5 @@ entity.user_alert_type.collection:
 entity.user_alert.collection:
   title: 'User Alerts'
   route_name: entity.user_alert.collection
-  parent: system.admin
+  parent: system.admin_content
   description: 'View all user alerts in the system.'
\ No newline at end of file
diff --git a/user_alert.module b/user_alert.module
index 232b09e..b1c661d 100644
--- a/user_alert.module
+++ b/user_alert.module
@@ -1,6 +1,7 @@
 <?php
 
 use Drupal\Core\Url;
+use Drupal\user_alert\Entity\UserAlert;
 
 /**
  * Implements hook_theme().
@@ -8,7 +9,16 @@ use Drupal\Core\Url;
 function user_alert_theme() {
   return array(
     'user_alert_add_list' => array(
-      'variables' => array('content' => NULL),
+      'variables' => array(
+        'content' => NULL
+      ),
+		),
+		'user_alert_message' => array(
+      'variables' => array(
+        'alert' => NULL,
+        'id' => NULL,
+        'is_closeable' => FALSE,
+      ),
     ),
   );
 }
@@ -27,92 +37,15 @@ function user_alert_theme() {
 function template_preprocess_user_alert_add_list(&$variables) {
   $variables['types'] = array();
   if (!empty($variables['content'])) {
-	foreach ($variables['content'] as $type) {
-	  $variables['types'][$type->id()] = array(
-		'type' => $type->id(),
-		'add_link' => \Drupal::l($type->label(), new Url('entity.user_alert.add', array('user_alert_type' => $type->id()))),
-		'description' => array(
-		  '#markup' => $type->getDescription(),
-		),
-	  );
-	}
-  }
-}
-
-/**
- * Implements hook_menu()
- * @todo: hook_menu is deprecated. these need to be integrated to the routing/actions yml
- */
-//function user_alert_menu() {
-//  $items = array();
-//
-//  $items['js/user-alert/get-message'] = array(
-//		'page callback' => 'user_alert_display_alert',
-//		'delivery callback' => 'ajax_deliver',
-//		'access arguments' => array('access content'),
-//		'type' => MENU_CALLBACK,
-//  );
-//  $items['js/user-alert/close-message'] = array(
-//		'page callback' => 'user_alert_close_message',
-//		'delivery callback' => 'ajax_deliver',
-//		'access arguments' => array('access content'),
-//		'type' => MENU_CALLBACK,
-//  );
-//
-//  return $items;
-//}
-
-/**
- * Gather alerts for the current user and return them. Exclude ones already closed.
- *
- * @return string
- *   Returns themed output if there is a message to display.
- */
-function user_alert_display_alert() {
-  if (module_exists('translation')) {
-    global $language;
-    $language = $language->language;
-  } else {
-    $language = LANGUAGE_NONE;
-  }
-
-	$output = '';
-	$result = db_query("SELECT n.nid FROM {node} n WHERE type = :type AND status = :status AND language = :language AND n.nid NOT IN (SELECT ua.nid FROM {user_alert} ua WHERE ua.nid = n.nid AND ua.uuid = :cookie) ORDER BY nid DESC", array(':type' => 'user_alert', ':status' => NODE_PUBLISHED,  ':language' => $language, ':cookie' => $_COOKIE['UUID']));
-
-	foreach ($result as $record) {
-		$alert = node_load($record->nid);
-		if (node_access('view', $alert) && isset($_COOKIE['UUID'])) {
-			$output .= theme('user_alert', array('node' => $alert));
+		foreach ($variables['content'] as $type) {
+			$variables['types'][$type->id()] = array(
+				'type' => $type->id(),
+				'add_link' => \Drupal::l($type->label(), new Url('entity.user_alert.add', array('user_alert_type' => $type->id()))),
+				'description' => array(
+					'#markup' => $type->getDescription(),
+				),
+			);
 		}
-	}
-	
-	return $output;
-}
- 
-/**
- * Respond to a user clicking to close an alert.
- */
-function user_alert_close_message() {
-	$nid = $_GET['message'];
-
-	if (!node_load($nid)) {
-	  return;
-	}
-	
-	$fields = array('nid' => $nid, 'uuid' => $_COOKIE['UUID']);
-	db_insert('user_alert')->fields($fields)->execute();
-}
-
-/**
- * Check to see that a cookie exists and has a format of at least .example.com
- * @return bool
- */
-function user_alert_cookie_is_valid() {
-  global $cookie_domain;
-
-  if (!drupal_strlen($cookie_domain) || substr_count($cookie_domain, '.') < 2) {
-    return FALSE;
   }
-
-  return TRUE;
 }
+
diff --git a/user_alert.routing.yml b/user_alert.routing.yml
index 46fde26..338189d 100644
--- a/user_alert.routing.yml
+++ b/user_alert.routing.yml
@@ -34,7 +34,7 @@ entity.user_alert_type.delete_form:
 
 # UserAlert routing definition
 entity.user_alert.canonical:
-  path: '/admin/user-alert/{user_alert}'
+  path: '/admin/content/user-alert/{user_alert}'
   defaults:
     _entity_view: 'user_alert'
     _title: 'User Alert'
@@ -42,7 +42,7 @@ entity.user_alert.canonical:
     _entity_access: 'user_alert.view'
 
 entity.user_alert.collection:
-  path: '/admin/user-alert'
+  path: '/admin/content/user-alert'
   defaults:
     _entity_list: 'user_alert'
     _title: 'User Alerts'
@@ -50,7 +50,7 @@ entity.user_alert.collection:
     _permission: 'view user alert entities'
 
 entity.user_alert.add_page:
-  path: '/admin/user-alert/add'
+  path: '/admin/content/user-alert/add'
   defaults:
     _controller: '\Drupal\user_alert\Controller\UserAlertController::addPage'
     _title: 'Add User Alert'
@@ -58,7 +58,7 @@ entity.user_alert.add_page:
     _permission: 'add user alert entities'
 
 entity.user_alert.add:
-  path: '/admin/user-alert/add/{user_alert_type}'
+  path: '/admin/content/user-alert/add/{user_alert_type}'
   defaults:
     _controller: '\Drupal\user_alert\Controller\UserAlertController::add'
     _title_callback: '\Drupal\user_alert\Controller\UserAlertController::addPageTitle'
@@ -66,7 +66,7 @@ entity.user_alert.add:
     _permission: 'add user alert entities'
 
 entity.user_alert.edit_form:
-  path: '/admin/user-alert/{user_alert}/edit'
+  path: '/admin/content/user-alert/{user_alert}/edit'
   defaults:
     _entity_form: user_alert.edit
     _title: 'Edit User Alert'
@@ -74,9 +74,26 @@ entity.user_alert.edit_form:
     _permission: 'edit user alert entities'
 
 entity.user_alert.delete_form:
-  path: '/admin/user-alert/{user_alert}/delete'
+  path: '/admin/content/user-alert/{user_alert}/delete'
   defaults:
     _entity_form: user_alert.delete
     _title: 'Delete User Alert'
   requirements:
-    _permission: 'delete user alert entities'
\ No newline at end of file
+    _permission: 'delete user alert entities'
+
+# UserAlert ajax endpoints
+entity.user_alert.get_message:
+  path: '/js/user-alert/get-message'
+  defaults:
+    _controller: '\Drupal\user_alert\Controller\UserAlertController::displayAlert'
+  requirements:
+    _permission: 'access content'
+
+entity.user_alert.close_message:
+  path: '/js/user-alert/close-message'
+  defaults:
+    _controller: '\Drupal\user_alert\Controller\UserAlertController::closeAlert'
+  requirements:
+    _permission: 'access content'
+
+    
