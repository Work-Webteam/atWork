{#
/**
 * @file
 * Default theme implementation to format the simplenews newsletter body.
 *
 * Copy this file in your theme directory to create a custom themed body.
 * Rename it to override it. Available templates:
 *   simplenews-newsletter-body--[newsletter_id].html.twig
 *   simplenews-newsletter-body--[view mode].html.twig
 *   simplenews-newsletter-body--[newsletter_id]--[view mode].html.twig
 * See README.txt for more details.
 *
 * Available variables:
 * - build: Render array. Use {{ build }} to print it.
 * - node: object(Drupal\node\Entity\Node)
 * - content: Exact field content for this entity
 *   The node entity with limited access to object properties and methods.
 *   * Methods: Only "getter" methods (method names starting with "get", "has", or "is")
 *     and a few common methods such as "id" and "label" are available.
 *     {{ node.getTitle }} : the Node title ( == {{ title }} )
 *     Calling other methods (such as node.delete) will result in an exception.
 *   * Properties: field values can be accessed as follows:
 *     {{ node.body.value | raw }} : text of body field
 * - newsletter: object(Drupal\simplenews\Entity\Newsletter)
 *     {{ newsletter.from_name }}: string
 *     {{ newsletter.subject }}: string
 * - title: Node title
 * - view_mode: The active display view mode of the node
 * - key: email key [node|test]
 * - format: newsletter format [plain|html]
 * - simplenews_subscriber: object(Drupal\simplenews\Entity\Subscriber)
 *   The subscriber for which the newsletter is built.
 *     {{ simplenews_subscriber.getMail  }}: string: subscriber's email address
 *   Note that depending on the used caching strategy, the generated body might
 *   be used for multiple subscribers. If you created personalized newsletters
 *   and can't use tokens for that, make sure to disable caching or write a
 *   custom caching strategy implemention.
 *
 * @see template_preprocess_simplenews_newsletter_body()
 *
 * Tied to suggestions here: https://www.drupal.org/node/1492498
 */
#}
<H1>{{ node.getTitle }}</H1>
{# We could print out default teasers with node.field_articles #}
{# but we want more control over output. #}
{# Any entity node value is accessible here #}

{% for key, ivalue in node.field_articles %}
  {# We always need a title  TODO: link this? #}
  <h2> {{ node.field_articles[key].entity.title.value }} </h2>
  {% if key == 0 %}
    {# We only want an image on the first newsarticle #}
    {# Need to base_URL for this because we will be sending it out #}
    {% set base_url = render_var(url('<front>')) %}
    {# Set the image url TODO: Change image style once we know what is required#}
    {%  set img_location = node.field_articles[key].entity.field_image.entity.fileuri|image_style('medium') %}
    {# concatenate this to get the default url, need to remove redundant url pieces #}
    {% set img_url = base_url|trim('/', 'right')~ img_location %}
    <img src="{{ img_url }}" alt="{{ node.field_articles[key].entity.field_image[key].value.alt }}"  title="{{ node.field_articles[key].entity.field_image[key].value.title }}"/>
  {% endif %}
  {# Print out the related custom teaser (if available) #}
  <p>{{ drupal_field('field_custom_teaser', 'node', node.field_articles[key].entity.id) }}</p>
{% endfor %}
{# Take note and did you know can just get printed out as is. #}
{{ content.field_take_note }}
{{ content.field_did_you_know }}
{# One or more group posts should show teaser content #}
{# This is taken care of in template field--node--field-group-posts--simplenews-issue.html.twig #}
{{ content.field_group_posts }}
{# This is taken care of in field--node--field-comments--simplenews-issue.html.twig #}
{{ content.field_comments }}

<hr />
{% if key == 'test' %}
  - - - {{ test_message }} - - -
{% endif %}
