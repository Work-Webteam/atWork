{#
/**
 * @file
 * Default theme implementation for a field.
 * 
 * To override output, copy the "field.html.twig" from the templates 
 * directory to your theme's directory and customize it, just like 
 * customizing other Drupal templates such as page.html.twig or node.html.twig.
 * 
 * Instead of overriding the theming for all fields, you can also just 
 * override theming for a subset of fields using Theme hook suggestions. 
 * For example, here are some theme hook suggestions that can be used for 
 * a field_foo field on an article node type:
 * 
 * field--node--field-foo--article.html.twig
 * field--node--field-foo.html.twig
 * field--node--article.html.twig
 * field--field-foo.html.twig
 * field--text-with-summary.html.twig
 * field.html.twig
 * 
 * Available variables:
 *  -  attributes: HTML attributes for the containing element.
 *  -  label_hidden: Whether to show the field label or not.
 *  -  title_attributes: HTML attributes for the title.
 *  -  label: The label for the field.
 *  -  multiple: TRUE if a field can contain multiple items.
 *  -  items: List of all the field items. Each item contains:
 *    -  attributes: List of HTML attributes for each item.
 *    -  content: The field item's content.
 *  -  entity_type: The entity type to which the field belongs.
 *  -  field_name: The name of the field.
 *  -  field_type: The type of the field.
 *  -  label_display: The display settings for the label.
 */
#}
{% set createdDate = timestamp|format_date('atwork_datetime') %}
{% set createdTime = timestamp|format_date('atwork_time') %}
{% set user_id = items[0]['content']['#options']['entity'].id() %}

 <div{{ attributes.addClass(classes, 'field--item') }}>
   <a title="View user profile." href="/user/{{ user_id }}" lang about="/user/{{ user_id }}" typeof="schema: Person" property="schema:name" datatype>{{ items[0]['content']['#title'] }}</a>{% trans %}&nbsp;posted on {{ createdDate }} | {{ createdTime }}{% endtrans %}
 </div>